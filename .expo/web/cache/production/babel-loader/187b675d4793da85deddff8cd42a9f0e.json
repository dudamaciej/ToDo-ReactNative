{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import*as actionTypes from\"../actions/types/todolistTypes\";var defaultState=function defaultState(){return{todoList:[{title:'Sample',description:'Sample Description'}]};};export default(function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:defaultState();var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case actionTypes.SET_NEW_LIST:{return _objectSpread({},state,{todoList:[].concat(_toConsumableArray(state.todoList),[action.newElement])});}case actionTypes.REMOVE_LIST:{state.todoList=state.todoList.filter(function(value){return value.title!=action.title;});return state;}default:{return state;}}});","map":{"version":3,"sources":["C:/Users/Maciej/Desktop/Projekty/ToDo-ReactNative/src/reducers/todoListReducer.ts"],"names":["actionTypes","defaultState","todoList","title","description","state","action","type","SET_NEW_LIST","newElement","REMOVE_LIST","filter","value"],"mappings":"w6BAAA,MAAO,GAAKA,CAAAA,WAAZ,sCAOA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,SAAyB,CAC1CC,QAAQ,CAAE,CAAC,CACPC,KAAK,CAAC,QADC,CAEPC,WAAW,CAAC,oBAFL,CAAD,CADgC,CAAzB,EAArB,CAUA,eAAe,UAA0D,IAAzDC,CAAAA,KAAyD,2DAAjDJ,YAAY,EAAqC,IAAlCK,CAAAA,MAAkC,2CACrE,OAAOA,MAAM,CAACC,IAAd,EACI,IAAKP,CAAAA,WAAW,CAACQ,YAAjB,CAA8B,CAC1B,wBACOH,KADP,EAEIH,QAAQ,8BAAKG,KAAK,CAACH,QAAX,GAAqBI,MAAM,CAACG,UAA5B,EAFZ,GAIH,CACD,IAAKT,CAAAA,WAAW,CAACU,WAAjB,CAA8B,CAC1BL,KAAK,CAACH,QAAN,CAAiBG,KAAK,CAACH,QAAN,CAAeS,MAAf,CAAsB,SAACC,KAAD,CAAW,CAC9C,MAAOA,CAAAA,KAAK,CAACT,KAAN,EAAeG,MAAM,CAACH,KAA7B,CACH,CAFgB,CAAjB,CAGA,MAAOE,CAAAA,KAAP,CACH,CACD,QAAQ,CACJ,MAAOA,CAAAA,KAAP,CACH,CAfL,CAiBH,CAlBD","sourcesContent":["import * as actionTypes from '../actions/types/todolistTypes';\nimport {ISingleElementList} from '../entities/todoSingleElement'\n\nexport interface ITodoListReducer {\n        todoList: ISingleElementList[];\n}\n\nconst defaultState = (): ITodoListReducer => ({\n    todoList: [{\n        title:'Sample',\n        description:'Sample Description' \n    },\n   ]\n    \n});\n\n\nexport default (state = defaultState(),action: any): ITodoListReducer => {\n    switch(action.type){\n        case actionTypes.SET_NEW_LIST:{\n            return{\n                ...state,\n                todoList:[...state.todoList, action.newElement]\n            }\n        }\n        case actionTypes.REMOVE_LIST: {\n            state.todoList = state.todoList.filter((value) => {\n                return value.title != action.title;\n            })\n            return state;\n        }\n        default:{\n            return state;\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}